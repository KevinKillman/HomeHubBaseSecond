// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SnippetDb;

#nullable disable

namespace SnippetDb.Migrations
{
    [DbContext(typeof(SnippetDbContext))]
    [Migration("20221214075958_AddedSubjectTitle")]
    partial class AddedSubjectTitle
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SnippetDb.Tables.Snippet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("HTMLContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Snippets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HTMLContent = "Example Content",
                            Subject = "Subject",
                            Title = "Title"
                        });
                });

            modelBuilder.Entity("SnippetDb.Tables.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Test Tag"
                        });
                });

            modelBuilder.Entity("SnippetDb.Tables.TaggedSnippet", b =>
                {
                    b.Property<int>("SnippetId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("SnippetId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TaggedSnippets");
                });

            modelBuilder.Entity("SnippetTag", b =>
                {
                    b.Property<int>("SnippetsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("SnippetsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("SnippetTag");
                });

            modelBuilder.Entity("SnippetDb.Tables.TaggedSnippet", b =>
                {
                    b.HasOne("SnippetDb.Tables.Snippet", "Snippet")
                        .WithMany()
                        .HasForeignKey("SnippetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnippetDb.Tables.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Snippet");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SnippetTag", b =>
                {
                    b.HasOne("SnippetDb.Tables.Snippet", null)
                        .WithMany()
                        .HasForeignKey("SnippetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnippetDb.Tables.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
